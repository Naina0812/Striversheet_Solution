//returning sum of minimum spanning tree
int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
        vector<int>visited(V,0);
        
        pq.push({0,0});  //wt and edge
        int sum=0;
        
        while(!pq.empty()){
            auto it= pq.top();
            pq.pop();
            
            int  node=it.second;
            int wt= it.first;
            
            if(visited[node]==1){
                continue;
            }
            
            visited[node]=1;
            sum+=wt;
            
            for(auto it: adj[node]){
                int adjNode= it[0];
                int edw= it[1];
                if(!visited[adjNode]){
                    pq.push({edw, adjNode});
                }
            }
        }
        return sum ;
    }

    //returning edge wt of minimum spanning tree
    #include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // Write your code here.
    //create adjacency list
    unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0;i<m;i++){
        int u=g[i].first.first;  //given input vector ko dekhe 
        int v= g[i].first.second;
        int w=g[i].second;

        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }

    //required data structure
    vector<int>key(n+1,INT_MAX);  //src 1 se start ho raha
    vector<bool>mst(n+1,false);
    vector<int>parent(n+1,-1);

    //start algo
    
    int src=1;
    key[src]=0;

    for(int i=1;i<=n;i++){
        int mini=INT_MAX;
        int u;
        
        // finding u in the key
        for(int v=1;v<=n;v++){
            if(mst[v]==false && key[v]<mini){
                mini=key[v];
                u=v;
            }
        }

        // mark mst
        mst[u]=true;

        //find adjacency 
        for(auto it: adj[u]){
            int v= it.first;
            int w=it.second;

            if(mst[v]==false && key[v]>w){
                parent[v]=u;
                key[v]=w;
            }
        }
    }
    vector<pair<pair<int, int>, int>>result;
    for(int i=2;i<=n;i++){
        result.push_back({{parent[i],i},key[i]});
    }
    return result;


}